
SET SERVEROUTPUT ON;

--● 교수 로그인 확인 프로시저 생성
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_LOGIN
( V_ID      IN  TBL_PROFESSOR.PROFNO%TYPE
, V_PW      IN  TBL_PROFESSOR.PW%TYPE
)
IS
    V_PW2               TBL_PROFESSOR.PW%TYPE;
    V_SUBJECT_NAME      TBL_SUBJECT.NAME%TYPE;
    V_ENDDATE           TBL_OPENSUBJECT.ENDDATE%TYPE;
    USER_DEFINE_ERROR1  EXCEPTION;  -- 아이디나 패스워드가 올바르지 않은 경우
    USER_DEFINE_ERROR2  EXCEPTION;  -- 해당 교수가 성적 처리 할 개설과목이 없는 경우
    
    CURSOR CUR_OPENSUBJECT_SELECT
    IS
    SELECT 과목
    FROM VIEW_PROFESSOR_LOGIN
    WHERE 교수번호 = V_ID AND 과목완료일 <= SYSDATE;
    --WHERE 교수번호 = V_ID AND 과목완료일 = TO_DATE('2022-03-18', 'YYYY-MM-DD');
    
BEGIN
    
    V_PW2 := -1;
    V_SUBJECT_NAME := 'N';
    
    -- 관리자 테이블의 비밀번호 변수에 담기
    SELECT PW INTO V_PW2
    FROM TBL_PROFESSOR
    WHERE PROFNO = V_ID;

    
    -- 비밀번호 맞는 지 확인 후 VIEW 띄우기
    IF (V_PW = V_PW2)
        THEN
            OPEN CUR_OPENSUBJECT_SELECT;
            
            LOOP
                FETCH CUR_OPENSUBJECT_SELECT INTO V_SUBJECT_NAME;
                
                IF(V_SUBJECT_NAME = 'N')       -- 해당 교수가 성적 처리할 개설과목이 없는 경우
                    THEN RAISE USER_DEFINE_ERROR2;
                END IF;
        
                -- 커서에서 더 이상 데이터가 쏟아져 나오지 않는 상태 ... 『NOTFOUND』
                EXIT WHEN CUR_OPENSUBJECT_SELECT%NOTFOUND;
        
                -- 출력
                DBMS_OUTPUT.PUT_LINE(V_SUBJECT_NAME);
                
            END LOOP;
    ELSE
        RAISE USER_DEFINE_ERROR1;   -- 아이디나 비밀번호가 올바르지 않은 경우 에러 발생
    END IF;
    
    -- 예외 처리
    EXCEPTION
        WHEN USER_DEFINE_ERROR1
            THEN RAISE_APPLICATION_ERROR(-20004, '아이디나 비밀번호가 올바르지 않습니다.');
        WHEN USER_DEFINE_ERROR2
            THEN RAISE_APPLICATION_ERROR(-20002, '성적 처리할 개설과목이 없습니다.');
        WHEN OTHERS
            THEN DBMS_OUTPUT.PUT_LINE('오류 발생');
        
    -- 이상 없을 시
    
END;
--==>> Procedure PRC_PRFESSOR_LOGIN이(가) 컴파일되었습니다.


--테스트
-- 유영희씨 강의에 -> 1명
--OPSUB0040	2021-12-31	2022-01-28	2022-03-18	20	40	40	OP_CO6	SUB0038	18
--OPSUB0041	2022-01-29	2022-03-18	2022-03-18	20	40	40	OP_CO6	SUB0039	19
SELECT *
FROM TBL_DROPREASON;
SELECT *
FROM TBL_SIGNCOURSE;
SELECT *
FROM TBL_STUDENT;
SELECT *
FROM TBL_OPENCOURSE;
SELECT *
FROM TBL_OPENSUBJECT;
INSERT INTO TBL_SIGNCOURSE
VALUES(SEQ_SIGNCOURSE.NEXTVAL, SYSDATE, 'S00005', 'OP_CO6');
INSERT INTO TBL_SIGNCOURSE
VALUES(SEQ_SIGNCOURSE.NEXTVAL, SYSDATE, 'S00006', 'OP_CO6');
INSERT INTO TBL_SIGNCOURSE
VALUES(SEQ_SIGNCOURSE.NEXTVAL, SYSDATE, 'S00007', 'OP_CO6');
INSERT INTO TBL_SIGNCOURSE
VALUES(SEQ_SIGNCOURSE.NEXTVAL, SYSDATE, 'S00008', 'OP_CO6');
INSERT INTO TBL_SIGNCOURSE
VALUES(SEQ_SIGNCOURSE.NEXTVAL, SYSDATE, 'S00009', 'OP_CO6');
INSERT INTO TBL_SIGNCOURSE
VALUES(SEQ_SIGNCOURSE.NEXTVAL, SYSDATE, 'S00010', 'OP_CO6');

SELECT *
FROM TBL_SUBJECT;
SELECT *
FROM TBL_OPENSUBJECT;
EXEC PRC_PROFESSOR_SUBJECT_SELECT('OPSUB0041', 'OP_CO6');


--● 특정 과목을 눌렀을 때 성적 입력 화면(데이터) 출력 프로시저 생성
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_SUBJECT_SELECT
( V_OPENSUBJECT_CODE    IN  TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE
, V_OPENCOURSE_CODE     IN  TBL_OPENSUBJECT.OPENCOURSE_CODE%TYPE
)
IS
    V_STUDNO            TBL_STUDENT.STUDNO%TYPE;
    V_NAME              TBL_STUDENT.NAME%TYPE;
    V_ATTEND            TBL_SCORE.ATTEND%TYPE;
    V_PRACTICE          TBL_SCORE.PRACTICE%TYPE;
    V_WRITE             TBL_SCORE.WRITE%TYPE;
    V_SIGNCOURSE_CODE   TBL_SIGNCOURSE.SIGNCOURSE_CODE%TYPE;
    V_DROPOX            CHAR(2);
    
    -- 커서 정의
    CURSOR CUR_SCORE_SELECT
    IS 
    SELECT 학번, 학생이름, 출결점수, 필기점수, 실기점수, 중도탈락여부
    FROM VIEW_SCORE_PRINT
    WHERE 개설과정코드 = V_OPENCOURSE_CODE AND 개설과목코드 = V_OPENSUBJECT_CODE;
    
BEGIN
    
    OPEN CUR_SCORE_SELECT; -- 커서 내용 채우기
    
    LOOP
        FETCH CUR_SCORE_SELECT INTO V_STUDNO, V_NAME, V_ATTEND, V_PRACTICE, V_WRITE, V_DROPOX;
        
        -- 커서에서 더 이상 데이터가 쏟아져 나오지 않는 상태 ... 『NOTFOUND』
        EXIT WHEN CUR_SCORE_SELECT%NOTFOUND;
        
        -- 출력
        IF(V_DROPOX = 'X')
            THEN DBMS_OUTPUT.PUT_LINE(V_STUDNO || '  ' || V_NAME || '  ' || V_ATTEND || '점  ' || V_PRACTICE || '점  ' || V_WRITE || '점  ');
        END IF;
                
    END LOOP;
END;


-- 테스트데이터
SELECT *
FROM TBL_SUBJECT;
SELECT *
FROM TBL_OPENCOURSE;
SELECT *
FROM TBL_OPENSUBJECT;
SELECT *
FROM TBL_SIGNCOURSE;
SELECT *
FROM TBL_SCORE;
SELECT *
FROM TBL_STUDENT;

EXEC PRC_PROFESSOR_SCORE_INSERT('OPSUB0040', '알고리즘(상)', 'S00005', 0, 0, 10);
EXEC PRC_PROFESSOR_SCORE_INSERT('OPSUB0040', '알고리즘(상)', 'S00006', 70, 65, 10);
EXEC PRC_PROFESSOR_SCORE_INSERT('OPSUB0040', '알고리즘(상)', 'S00007', 90, 80, 70);
EXEC PRC_PROFESSOR_SCORE_INSERT('OPSUB0040', '알고리즘(상)', 'S00008', 40, 20, 100);
EXEC PRC_PROFESSOR_SCORE_INSERT('OPSUB0040', '알고리즘(상)', 'S00009', 35, 100, 20);
EXEC PRC_PROFESSOR_SCORE_INSERT('OPSUB0040', '알고리즘(상)', 'S00010', 100, 100, 100);


SELECT *
FROM TBL_SCORE;
DELETE TBL_SCORE
WHERE SCORE_CODE = 19;
DELETE TBL_SIGNCOURSE
WHERE SIGNCOURSE_CODE = 4;

INSERT INTO TBL_DROP
VALUES(SEQ_DROP.NEXTVAL, '2022-03-01', 7, 1);
INSERT INTO TBL_DROP
VALUES(SEQ_DROP.NEXTVAL, '2022-03-05', 8, 2);
INSERT INTO TBL_DROP
VALUES(SEQ_DROP.NEXTVAL, '2022-03-17', 9, 3);

SELECT *
FROM TBL_DROP;

--● 교수가 본인 강의 과목 성적 INSERT 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_SCORE_INSERT
( VC_OPENSUBJECT_CODE IN TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE
, V_SUBJECT_NAME    IN  TBL_SUBJECT.NAME%TYPE
, V_STUDNO          IN  TBL_STUDENT.STUDNO%TYPE
, V_ATTEND          IN  TBL_SCORE.ATTEND%TYPE
, V_PRACTICE        IN  TBL_SCORE.PRACTICE%TYPE
, V_WRITE           IN  TBL_SCORE.WRITE%TYPE
)
IS
    V_TEST_STUDNO       TBL_STUDENT.STUDNO%TYPE;
    V_OPENSUBJECT_CODE  TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE; -- 개설과목코드
    V_SIGNCOURSE_CODE   TBL_SIGNCOURSE.SIGNCOURSE_CODE%TYPE;   -- 수강신청코드
    
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    V_TEST_STUDNO := -1;
    
    IF(V_ATTEND > 100 OR V_PRACTICE > 100 OR V_WRITE > 100) -- 점수들이 100점을 초과할 경우
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    SELECT OPENSUBJECT_CODE INTO V_OPENSUBJECT_CODE
    FROM TBL_SUBJECT SJ LEFT JOIN TBL_OPENSUBJECT OS
                        ON SJ.SUBJECT_CODE = OS.SUBJECT_CODE
    WHERE NAME = V_SUBJECT_NAME AND OPENSUBJECT_CODE = VC_OPENSUBJECT_CODE;
    
    SELECT SIGNCOURSE_CODE, STUDNO INTO V_SIGNCOURSE_CODE, V_TEST_STUDNO
    FROM TBL_SIGNCOURSE
    WHERE STUDNO = V_STUDNO;
    
    -- 예외 발생
    IF (V_TEST_STUDNO = '-1') -- 해당 학번이 과목에 존재하지 않을 경우
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- INSERT 구문
    INSERT INTO TBL_SCORE(SCORE_CODE, ATTEND, PRACTICE, WRITE, OPENSUBJECT_CODE, SIGNCOURSE_CODE)
           VALUES(SEQ_SCORE.NEXTVAL, V_ATTEND, V_PRACTICE, V_WRITE, V_OPENSUBJECT_CODE, V_SIGNCOURSE_CODE);
    
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '각 점수는 100점을 초과할 수 없습니다.');
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20002, '학번이 ' || V_STUDNO || '인 학생이 존재하지 않습니다.');
END;
--==>> Procedure PRC_PROFESSOR_SCORE_INSERT이(가) 컴파일되었습니다.

SELECT *
FROM TBL_OPENSUBJECT;
ROLLBACK;
EXEC PRC_PROFESSOR_OS_UPDATE('OPSUB0041', 10, 0, 100);

--● 개설과목 테이블 배점 컬럼 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_OS_UPDATE
( V_OPENSUBJECT_CODE  IN  TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE
, V_ATTEND            IN  TBL_OPENSUBJECT.ATTEND%TYPE
, V_PRACTICE          IN  TBL_OPENSUBJECT.PRACTICE%TYPE
, V_WRITE             IN  TBL_OPENSUBJECT.WRITE%TYPE
)
IS
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    -- 총 배점이 100점이 아닐 경우 에러 발생
    IF ( V_ATTEND + V_PRACTICE + V_WRITE != 100)
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    -- UPDATE
    UPDATE TBL_OPENSUBJECT
    SET ATTEND = V_ATTEND, PRACTICE = V_PRACTICE, WRITE = V_WRITE
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '총 배점 합은 100점이어야 합니다.');
        --WHEN OTHERS
            --THEN ROLLBACK;
    
    -- 이상 없을 시
    --COMMIT;
    
END;
--==>> Procedure PRC_PRFESSOR_LOGIN이(가) 컴파일되었습니다.

SELECT *
FROM TBL_SCORE;
EXEC PRC_PROFESSOR_SCORE_UPDATE(10, 101, 20, 20);
EXEC PRC_PROFESSOR_SCORE_UPDATE(10, 0, 0, 15);
--● 성적 테이블 UPDATE 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_SCORE_UPDATE
( V_SCORE_CODE          IN  TBL_SCORE.SCORE_CODE%TYPE
, V_ATTEND              IN  TBL_SCORE.ATTEND%TYPE
, V_PRACTICE            IN  TBL_SCORE.PRACTICE%TYPE
, V_WRITE               IN  TBL_SCORE.WRITE%TYPE
)
IS
    V_TEST_SCORE_CODE   TBL_SCORE.SCORE_CODE%TYPE;
    USER_DEFINE_ERROR   EXCEPTION;
BEGIN
    
    IF(V_ATTEND > 100 OR V_PRACTICE > 100 OR V_WRITE > 100) -- 점수들이 100점을 초과할 경우
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    SELECT SCORE_CODE INTO V_TEST_SCORE_CODE
    FROM TBL_SCORE
    WHERE SCORE_CODE = V_SCORE_CODE;
    
    -- 성적 테이블 UPDATE
    UPDATE TBL_SCORE
    SET ATTEND = V_ATTEND, PRACTICE = V_PRACTICE, WRITE = V_WRITE
      , SCORE_DATE = SYSDATE
    WHERE SCORE_CODE = V_SCORE_CODE;
    
    -- 에러 발생 시
    EXCEPTION
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '각 점수는 100점을 초과할 수 없습니다.');
        WHEN NO_DATA_FOUND 
            THEN RAISE_APPLICATION_ERROR(-20002, '해당 SCORE_CODE 데이터가 존재하지 않습니다.');
    /*  WHEN OTHERS
            THEN ROLLBACK;*/
    
    -- 이상 없을 시
    --COMMIT;
    
END;
--==>> Procedure PRC_PROFESSOR_SCORE_DELETE이(가) 컴파일되었습니다.


SELECT *
FROM TBL_SCORE;
EXEC PRC_PROFESSOR_SCORE_DELETE(10);
EXEC PRC_PROFESSOR_SCORE_DELETE(9);
ROLLBACK;

--● 성적 테이블 DELETE 프로시저
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_SCORE_DELETE
( V_SCORE_CODE  IN  TBL_SCORE.SCORE_CODE%TYPE
)
IS
    V_TEST_SCORE_CODE   TBL_SCORE.SCORE_CODE%TYPE;
    
BEGIN

    SELECT SCORE_CODE INTO V_TEST_SCORE_CODE
    FROM TBL_SCORE
    WHERE SCORE_CODE = V_SCORE_CODE;
    
    -- DELETE
    DELETE
    FROM TBL_SCORE
    WHERE SCORE_CODE = V_SCORE_CODE;
    
    
    
    -- 에러 발생 시
    EXCEPTION
        WHEN NO_DATA_FOUND
            THEN RAISE_APPLICATION_ERROR(-20001, '해당 SCORE_CODE 데이터가 존재하지 않습니다.');
    /*EXCEPTION
        WHEN OTHERS
            THEN ROLLBACK;*/
    
    -- 이상 없을 시
    --COMMIT;
    
END;
--==>> Procedure PRC_PROFESSOR_SCORE_DELETE이(가) 컴파일되었습니다.













