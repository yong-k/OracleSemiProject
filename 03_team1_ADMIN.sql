
--■■■관리자 교수 계정 INSERT 프로시저  ■■■--
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_INSERT
( V_NAME        IN TBL_PROFESSOR.NAME%TYPE
, V_SSN         IN TBL_PROFESSOR.SSN%TYPE
)
IS
    V_PROFNO                TBL_PROFESSOR.PROFNO%TYPE;
    V_PW                    TBL_PROFESSOR.PW%TYPE;
    CKSSN                   TBL_PROFESSOR.SSN%TYPE;
    
    PROFESSOR_CKSSN_ERROR   EXCEPTION;

BEGIN
    -- 교수 테이블에 입력한 주민번호 존재 확인
    SELECT COUNT(*) INTO CKSSN
    FROM TBL_PROFESSOR
    WHERE SSN = V_SSN;
    
    -- 이미 있는 주민번호면 예외 발생
    IF (CKSSN != 0)
        THEN RAISE PROFESSOR_CKSSN_ERROR;
    END IF;
    
    -- 교수번호 값 대입
    V_PROFNO := 'P' || LPAD(SEQ_PROFESSOR.NEXTVAL, 4, 0);
    
    -- 비밀번호 DEFAULT 설정
    V_PW := SUBSTR(V_SSN, 7);
    
    -- 쿼리작성
    INSERT INTO TBL_PROFESSOR(PROFNO, NAME, SSN, PW, REGDATE)
    VALUES(V_PROFNO, V_NAME, V_SSN, V_PW, SYSDATE);
    
    --예외처리
    EXCEPTION      
        WHEN PROFESSOR_CKSSN_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '이미 존재하는 주민번호입니다.');
                 ROLLBACK;
        WHEN OTHERS 
            THEN ROLLBACK;
        
    --커밋
    --COMMIT;
END;
--==>> Procedure PRC_PROFESSOR_INSERT이(가) 컴파일되었습니다.


--■■■관리자 교수 계정 UPDATE 프로시저 ■■■--
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_UPDATE
( V_PROFNO  IN TBL_PROFESSOR.PROFNO%TYPE
, V_NAME    IN TBL_PROFESSOR.NAME%TYPE
, V_PW      IN TBL_PROFESSOR.PW%TYPE
)
IS
    PROFNO_CHECK     NUMBER;    
    PROFNO_ERROR     EXCEPTION;
BEGIN
    -- 입력한 교수번호 존재하는지 확인
    SELECT COUNT(*) INTO PROFNO_CHECK
    FROM TBL_PROFESSOR
    WHERE PROFNO = V_PROFNO;

    -- 교수번호에 해당하는 사람 없으면, 예외 발생
    IF (PROFNO_CHECK = 0) 
        THEN RAISE PROFNO_ERROR;
    END IF;

    -- 쿼리작성
    UPDATE TBL_PROFESSOR
    SET NAME = V_NAME, PW = V_PW
    WHERE PROFNO = V_PROFNO;
        
    -- 예외처리
    EXCEPTION
        WHEN PROFNO_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '입력하신 교수번호가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS 
            THEN ROLLBACK;
            
    -- 커밋
    --COMMIT;
END;
--==>> Procedure PRC_PROFESSOR_UPDATE이(가) 컴파일되었습니다.


--■■■교수 계정 DELETE 프로시저 ■■■--
CREATE OR REPLACE PROCEDURE PRC_PROFESSOR_DELETE
( 
    V_PROFNO  IN TBL_PROFESSOR.PROFNO%TYPE 
)
IS
    PROFNO_CHECK     NUMBER;    
    PROFNO_ERROR     EXCEPTION;
BEGIN
    -- 입력한 교수번호 존재하는지 확인
    SELECT COUNT(*) INTO PROFNO_CHECK
    FROM TBL_PROFESSOR
    WHERE PROFNO = V_PROFNO;

    -- 교수번호에 해당하는 사람 없으면, 예외 발생
    IF (PROFNO_CHECK = 0) 
        THEN RAISE PROFNO_ERROR;
    END IF;
    
    -- 쿼리작성
    DELETE
    FROM TBL_PROFESSOR
    WHERE PROFNO = V_PROFNO;
    
    -- 예외처리
    EXCEPTION
        WHEN PROFNO_ERROR
            THEN RAISE_APPLICATION_ERROR(-20002, '입력하신 교수번호가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS 
            THEN ROLLBACK;
            
    -- 커밋
    --COMMIT;
END;
--==>> Procedure PRC_PROFESSOR_DELETE이(가) 컴파일되었습니다.


--------------------------------------------------------------------------------

-- 학생 테이블 INSERT(이름, SSN, PW:주번뒷자리) 프로시저
-- 프로시저 명 : PRC_STUDENT_INSERT
CREATE OR REPLACE PROCEDURE PRC_STUDENT_INSERT
( V_NAME   IN TBL_STUDENT.NAME%TYPE
, V_SSN    IN TBL_STUDENT.SSN%TYPE
)
IS
    V_STUDNO    TBL_STUDENT.STUDNO%TYPE;
    V_PW        TBL_STUDENT.PW%TYPE;
    CKSSN       TBL_STUDENT.SSN%TYPE;
    
    STUDENT_CKSSN_ERROR  EXCEPTION;
    
BEGIN
    -- 학생 테이블에 입력한 주민번호 존재 확인
    SELECT COUNT(*) INTO CKSSN
    FROM TBL_STUDENT
    WHERE SSN = V_SSN;
    
    -- 이미 있는 주민번호면 예외 발생
    IF (CKSSN != 0)
        THEN RAISE STUDENT_CKSSN_ERROR;
    END IF;
    
    -- 학번 값 대입
    V_STUDNO := 'S' || LPAD(SEQ_STUDENT.NEXTVAL, 5, 0);
    
    -- 비밀번호 DEFAULT 설정
    V_PW := SUBSTR(V_SSN, 7);
    
    -- 쿼리작성
    INSERT INTO TBL_STUDENT(STUDNO, NAME, SSN, PW, REGDATE)
    VALUES(V_STUDNO, V_NAME, V_SSN, V_PW, SYSDATE);
    
    
    --예외처리
    EXCEPTION      
        WHEN STUDENT_CKSSN_ERROR
            THEN RAISE_APPLICATION_ERROR(-20001, '이미 존재하는 주민번호입니다.');
                 ROLLBACK;
        WHEN OTHERS 
            THEN ROLLBACK;
        
    --커밋
    --COMMIT;
    
END;
--==>> Procedure PRC_STUDENT_INSERT이(가) 컴파일되었습니다.


-- - 학생 테이블 UPDATE
-- 프로시저 명 : PRC_STUDENT_UPDATE
CREATE OR REPLACE PROCEDURE PRC_STUDENT_UPDATE
( V_STUDNO   IN TBL_STUDENT.STUDNO%TYPE
, V_NAME     IN TBL_STUDENT.NAME%TYPE
, V_PW       IN TBL_STUDENT.PW%TYPE
)
IS
    STUDNO_CHECK     NUMBER;    
    STUDNO_ERROR     EXCEPTION;
   
BEGIN
    -- 입력한 학번 존재하는지 확인
    SELECT COUNT(*) INTO STUDNO_CHECK
    FROM TBL_STUDENT
    WHERE STUDNO = V_STUDNO;

    -- 학번에 해당하는 사람 없으면, 예외 발생
    IF (STUDNO_CHECK = 0) 
        THEN RAISE STUDNO_ERROR;
    END IF;
    
    -- 쿼리작성
    UPDATE TBL_STUDENT
    SET NAME = V_NAME, PW = V_PW
    WHERE STUDNO = V_STUDNO;
    
    -- 예외처리
    EXCEPTION
        WHEN STUDNO_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '입력하신 학번이 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS  
            THEN ROLLBACK;
    
    --커밋
    --COMMIT;
END;
--==>> Procedure PRC_STUDENT_UPDATE이(가) 컴파일되었습니다.


-- - 학생 테이블 DELETE
-- 프로시저 명 : PRC_STUDENT_DELETE
CREATE OR REPLACE PROCEDURE PRC_STUDENT_DELETE
( 
    V_STUDNO   IN TBL_STUDENT.STUDNO%TYPE
)
IS
    STUDNO_CHECK     NUMBER;    
    STUDNO_ERROR     EXCEPTION;
BEGIN
    -- 입력한 학번 존재하는지 확인
    SELECT COUNT(*) INTO STUDNO_CHECK
    FROM TBL_STUDENT
    WHERE STUDNO = V_STUDNO;

    -- 학번에 해당하는 사람 없으면, 예외 발생
    IF (STUDNO_CHECK = 0) 
        THEN RAISE STUDNO_ERROR;
    END IF;
    
    -- 쿼리작성
    DELETE
    FROM TBL_STUDENT
    WHERE STUDNO = V_STUDNO;
    
    
    -- 예외 처리
    EXCEPTION
        WHEN STUDNO_ERROR
            THEN RAISE_APPLICATION_ERROR(-20003, '입력하신 학번이 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS 
            THEN ROLLBACK;
    
    --커밋
    --COMMIT;
    
END;
--==>> Procedure PRC_STUDENT_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- ●●● 과정 테이블 프로시저 ●●● --

-- ① 과정테이블 인서트 프로시저 (과정명)
CREATE OR REPLACE PROCEDURE PRC_COURSE_INSERT
( V_NAME    IN  TBL_COURSE.NAME%TYPE 
)
IS
    -- 시퀀스 및 조합된 과정코드를 담을 변수 선언
    V_COURSE_CODE   TBL_COURSE.COURSE_CODE%TYPE;
BEGIN
    -- 변수에 과정코드 시퀀스 담기
    V_COURSE_CODE := 'CO' || LPAD(SEQ_COURSE.NEXTVAL, 4, 0);
    
    -- 과정테이블 데이터 입력 쿼리
    INSERT INTO TBL_COURSE(COURSE_CODE, NAME)
    VALUES(V_COURSE_CODE, V_NAME);
    
    -- 커밋
    --COMMIT;
END;
--==>> Procedure PRC_COURSE_INSERT이(가) 컴파일되었습니다.


-- ② 과정테이블 UPDATE 프로시저(과정코드, 변경할 이름)
CREATE OR REPLACE PROCEDURE PRC_COURSE_UPDATE
( V_COURSE_CODE     IN  TBL_COURSE.COURSE_CODE%TYPE
, V_NAME            IN  TBL_COURSE.NAME%TYPE 
)
IS
    COURSE_CODE_CHECK   TBL_COURSE.COURSE_CODE%TYPE;
    COURSE_CODE_ERROR   EXCEPTION;
    
BEGIN
    -- 과정코드 확인
    SELECT NVL(MAX(COURSE_CODE), NULL) INTO COURSE_CODE_CHECK
    FROM  TBL_COURSE
    WHERE COURSE_CODE = V_COURSE_CODE;
    
    -- 없는 과목코드면, 예외 발생
    IF (COURSE_CODE_CHECK IS NULL)
        THEN RAISE COURSE_CODE_ERROR;
    END IF;

    -- 쿼리 작성
    UPDATE  TBL_COURSE
    SET     NAME = V_NAME
    WHERE   COURSE_CODE = V_COURSE_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN COURSE_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20004, '입력하신 과정코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋
    --COMMIT;      
    
END;
--==>> Procedure PRC_COURSE_UPDATE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- ③ 과정테이블 DELETE 프로시저(과정코드)
CREATE OR REPLACE PROCEDURE PRC_COURSE_DELETE
( V_COURSE_CODE     IN  TBL_COURSE.COURSE_CODE%TYPE
)
IS
    COURSE_CODE_CHECK   TBL_COURSE.COURSE_CODE%TYPE;
    COURSE_CODE_ERROR   EXCEPTION;
    
BEGIN
    -- 과정코드 확인
    SELECT NVL(MAX(COURSE_CODE), NULL) INTO COURSE_CODE_CHECK
    FROM  TBL_COURSE
    WHERE COURSE_CODE = V_COURSE_CODE;
    
    -- 없는 과목코드면, 예외 발생
    IF (COURSE_CODE_CHECK IS NULL)
        THEN RAISE COURSE_CODE_ERROR;
    END IF;

    -- 쿼리 작성
    DELETE
    FROM TBL_COURSE
    WHERE COURSE_CODE = V_COURSE_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN COURSE_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20004, '입력하신 과정코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋
    --COMMIT;             
END;
--==>> Procedure PRC_COURSE_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- TBL_OPENCOURE :  개설과정 데이터 추가
CREATE OR REPLACE PROCEDURE PRC_OPENCOURSE_INSERT
( V_STARTDATE            IN TBL_OPENCOURSE.STARTDATE%TYPE
, V_ENDDATE              IN TBL_OPENCOURSE.ENDDATE%TYPE
, V_OPENCOURSE_DATE      IN TBL_OPENCOURSE.OPENCOURSE_DATE%TYPE
, V_PROFNO               IN TBL_OPENCOURSE.PROFNO%TYPE
, V_COURSE_CODE          IN TBL_OPENCOURSE.COURSE_CODE%TYPE
, V_CLASSROOM_CODE       IN TBL_OPENCOURSE.CLASSROOM_CODE%TYPE
)
IS
    V_OPENCOURSE_CODE  TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE;
    V_COUNT NUMBER := 0;
    V_OLD_ST_DATE       TBL_OPENCOURSE.STARTDATE%TYPE;
    V_OLD_END_DATE      TBL_OPENCOURSE.ENDDATE%TYPE;
    V_OLD_PROF_ID       TBL_OPENCOURSE.PROFNO%TYPE;
    V_OLD_CLASS         TBL_OPENCOURSE.CLASSROOM_CODE%TYPE;
    
    
    V_CHECK_PROFNO      TBL_OPENCOURSE.PROFNO%TYPE;
    V_CHECK_COURSE      TBL_OPENCOURSE.COURSE_CODE%TYPE;
    V_CHECK_CLASSROOM   TBL_OPENCOURSE.CLASSROOM_CODE%TYPE;
    
    USER_DEFINE_ERROR   EXCEPTION;
    USER_DEFINE_ERROR2  EXCEPTION; -- 시작날짜 > 끝난날짜 일때 발생
    USER_DEFINE_ERROR3  EXCEPTION; -- 교수코드 없을시 발생
    USER_DEFINE_ERROR4  EXCEPTION; -- 과정코드 없을시 발생
    USER_DEFINE_ERROR5  EXCEPTION; -- 과정코드 없을시 발생
    
    CURSOR CUR_CHECK_DATE 
    IS 
    SELECT PROFNO, STARTDATE, ENDDATE, CLASSROOM_CODE
    FROM TBL_OPENCOURSE;   
    
BEGIN
    ------------------------------------ > 교수코드 없을시 예외
    SELECT NVL(MAX(PROFNO), '0') INTO V_CHECK_PROFNO 
    FROM   TBL_PROFESSOR
    WHERE PROFNO = V_PROFNO;
    
    IF V_CHECK_PROFNO = '0'
        THEN RAISE USER_DEFINE_ERROR3;
    END IF;    
    ------------------------------------ > 과정코드 없을시 예외
    SELECT NVL(MAX(COURSE_CODE), '0') INTO V_CHECK_COURSE
    FROM   TBL_COURSE
    WHERE COURSE_CODE = V_COURSE_CODE;
    
    IF V_CHECK_COURSE = '0'
        THEN RAISE USER_DEFINE_ERROR4;
    END IF; 
    -------------------------------------- > 강의실코드 없을시 예외
    SELECT NVL(MAX(CLASSROOM_CODE), '0') INTO V_CHECK_CLASSROOM
    FROM   TBL_CLASSROOM
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    IF V_CHECK_CLASSROOM = '0'
        THEN RAISE USER_DEFINE_ERROR5;
    END IF; 
    --------------------------------------

    IF  (V_ENDDATE - V_STARTDATE < 0) 
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;    
    
    OPEN CUR_CHECK_DATE;
    
    LOOP 
        FETCH CUR_CHECK_DATE INTO V_OLD_PROF_ID, V_OLD_ST_DATE, V_OLD_END_DATE, V_OLD_CLASS;
        
        EXIT WHEN CUR_CHECK_DATE%NOTFOUND;
  
        IF(V_STARTDATE <= V_OLD_ST_DATE AND  V_ENDDATE >= V_OLD_ST_DATE AND (V_OLD_PROF_ID = V_PROFNO OR V_OLD_CLASS = V_CLASSROOM_CODE))
            THEN RAISE USER_DEFINE_ERROR;
        ELSIF (V_STARTDATE <= V_OLD_END_DATE AND V_ENDDATE >= V_OLD_END_DATE AND (V_OLD_PROF_ID = V_PROFNO OR V_OLD_CLASS = V_CLASSROOM_CODE))
            THEN RAISE USER_DEFINE_ERROR;
        ELSIF (V_STARTDATE >= V_OLD_ST_DATE AND V_ENDDATE <= V_OLD_END_DATE AND (V_OLD_PROF_ID = V_PROFNO OR V_OLD_CLASS = V_CLASSROOM_CODE))  
            THEN RAISE USER_DEFINE_ERROR;
        END IF;
       
  
    END LOOP;
    
    CLOSE CUR_CHECK_DATE;
    
    V_OPENCOURSE_CODE := CONCAT('OP_CO', TO_CHAR(SEQ_OPENCOURSE_CODE.NEXTVAL));
    
    INSERT INTO TBL_OPENCOURSE(OPENCOURSE_CODE, STARTDATE, ENDDATE, OPENCOURSE_DATE, PROFNO, COURSE_CODE, CLASSROOM_CODE)
    VALUES (V_OPENCOURSE_CODE, V_STARTDATE, V_ENDDATE, V_OPENCOURSE_DATE, V_PROFNO, V_COURSE_CODE, V_CLASSROOM_CODE);  
    
   COMMIT;   

   EXCEPTION
       WHEN USER_DEFINE_ERROR
         THEN RAISE_APPLICATION_ERROR(-20005, '이미 진행중인 과정의 강의실 또는 교수님입니다.' );
              ROLLBACK; 
       WHEN USER_DEFINE_ERROR2
         THEN  RAISE_APPLICATION_ERROR(-20301, '시작일이 종료일보다 이후입니다.' ); 
              ROLLBACK;
       WHEN USER_DEFINE_ERROR3
         THEN  RAISE_APPLICATION_ERROR(-20002, '교수코드가 존재하지 않습니다.' ); 
              ROLLBACK;
       WHEN USER_DEFINE_ERROR4
         THEN  RAISE_APPLICATION_ERROR(-20004, '과정코드가 존재하지 않습니다.' ); 
              ROLLBACK;       
       WHEN USER_DEFINE_ERROR5
         THEN  RAISE_APPLICATION_ERROR(-20006, '강의실코드가 존재하지 않습니다.' ); 
              ROLLBACK;              
       WHEN OTHERS
        THEN ROLLBACK;

END;
--==>> Procedure PRC_OPENCOURSE_INSERT이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------
-- ② 개설과정 데이터 UPDATE 프로시저 생성(개설과정코드, 강의시작일, 강의종료일, 교수번호, 과정코드, 강의실코드)
--> 과정시작일, 종료일 수정 불가 → 시작일/종료일 수정하려면 삭제했다가 다시 insert 
--> 과정담당교수, 과정코드, 강의실코드 update
CREATE OR REPLACE PROCEDURE PRC_OPENCOURSE_UPDATE
( V_OPENCOURSE_CODE      IN TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE
, V_PROFNO               IN TBL_OPENCOURSE.PROFNO%TYPE
, V_COURSE_CODE          IN TBL_OPENCOURSE.COURSE_CODE%TYPE
, V_CLASSROOM_CODE       IN TBL_OPENCOURSE.CLASSROOM_CODE%TYPE
)
IS
    V_CHECK_OPCODE   TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE;
    V_CHECK_PROFNO   TBL_OPENCOURSE.PROFNO%TYPE;
    V_CHECK_COURSE   TBL_OPENCOURSE.COURSE_CODE%TYPE;
    V_CHECK_CLASSROOM   TBL_OPENCOURSE.CLASSROOM_CODE%TYPE;
    
    USER_DEFINE_ERROR   EXCEPTION;    
    USER_DEFINE_ERROR1  EXCEPTION; -- 개설과정코드 없을 시 발생
    USER_DEFINE_ERROR2  EXCEPTION; -- 교수코드 없을시 발생
    USER_DEFINE_ERROR3  EXCEPTION; -- 과정코드 없을시 발생
    USER_DEFINE_ERROR4  EXCEPTION; -- 강의실코드 없을시 발생
    
    V_STARTDATE      TBL_OPENCOURSE.STARTDATE%TYPE;
    V_ENDDATE        TBL_OPENCOURSE.ENDDATE%TYPE;
    V_OLD_ST_DATE    TBL_OPENCOURSE.STARTDATE%TYPE;
    V_OLD_END_DATE   TBL_OPENCOURSE.ENDDATE%TYPE;
    V_OLD_PROF_ID    TBL_OPENCOURSE.PROFNO%TYPE;
    V_OLD_CLASS      TBL_OPENCOURSE.CLASSROOM_CODE%TYPE;  
    
    CURSOR CUR_CHECK_DATE 
    IS 
    SELECT PROFNO, STARTDATE, ENDDATE, CLASSROOM_CODE
    FROM TBL_OPENCOURSE;   
BEGIN

    ------------------------------------ > 개설과정코드 없을시 예외
    SELECT NVL(MAX(OPENCOURSE_CODE), '0') INTO V_CHECK_OPCODE
    FROM TBL_OPENCOURSE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
    
    IF  V_CHECK_OPCODE = '0'
        THEN RAISE USER_DEFINE_ERROR1;
    END IF;
    ------------------------------------ > 교수코드 없을시 예외
    SELECT NVL(MAX(PROFNO), '0') INTO V_CHECK_PROFNO 
    FROM   TBL_PROFESSOR
    WHERE  PROFNO = V_PROFNO;
    
    IF V_CHECK_PROFNO IN ('0')
        THEN RAISE USER_DEFINE_ERROR2;
    END IF;    
    ------------------------------------ > 과정코드 없을시 예외
    SELECT NVL(MAX(COURSE_CODE), '0') INTO V_CHECK_COURSE
    FROM   TBL_COURSE
    WHERE COURSE_CODE = V_COURSE_CODE;
    
    IF V_CHECK_COURSE = '0'
        THEN RAISE USER_DEFINE_ERROR3;
    END IF; 
    -------------------------------------- > 강의실코드 없을시 예외
    SELECT NVL(MAX(CLASSROOM_CODE), '0') INTO V_CHECK_CLASSROOM
    FROM   TBL_CLASSROOM
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    IF V_CHECK_CLASSROOM = '0'
        THEN RAISE USER_DEFINE_ERROR4;
    END IF; 
    
   ------------------------------------------------
   -- V_STARTDATE, V_ENDDATE 에 값 대입
   SELECT STARTDATE, ENDDATE INTO V_STARTDATE, V_ENDDATE
   FROM TBL_OPENCOURSE
   WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
   
   OPEN CUR_CHECK_DATE;
    
    LOOP 
        FETCH CUR_CHECK_DATE INTO V_OLD_PROF_ID, V_OLD_ST_DATE, V_OLD_END_DATE, V_OLD_CLASS;
        
        EXIT WHEN CUR_CHECK_DATE%NOTFOUND;
  
        IF(V_STARTDATE <= V_OLD_ST_DATE AND  V_ENDDATE >= V_OLD_ST_DATE AND (V_OLD_PROF_ID = V_PROFNO OR V_OLD_CLASS = V_CLASSROOM_CODE))
            THEN RAISE USER_DEFINE_ERROR;
        ELSIF (V_STARTDATE <= V_OLD_END_DATE AND V_ENDDATE >= V_OLD_END_DATE AND (V_OLD_PROF_ID = V_PROFNO OR V_OLD_CLASS = V_CLASSROOM_CODE))
            THEN RAISE USER_DEFINE_ERROR;
        ELSIF (V_STARTDATE >= V_OLD_ST_DATE AND V_ENDDATE <= V_OLD_END_DATE AND (V_OLD_PROF_ID = V_PROFNO OR V_OLD_CLASS = V_CLASSROOM_CODE))  
            THEN RAISE USER_DEFINE_ERROR;
        END IF;
        
    END LOOP;
    
    CLOSE CUR_CHECK_DATE;
    --------------------------------------> UPDATE 쿼리
    UPDATE TBL_OPENCOURSE
    SET PROFNO = V_PROFNO, COURSE_CODE = V_COURSE_CODE, CLASSROOM_CODE = V_CLASSROOM_CODE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
    
     
      EXCEPTION
       WHEN USER_DEFINE_ERROR1
         THEN RAISE_APPLICATION_ERROR(-20007, '개설과정코드가 존재하지 않습니다.'); 
              ROLLBACK;
       WHEN USER_DEFINE_ERROR2
         THEN RAISE_APPLICATION_ERROR(-20002, '교수코드가 존재하지 않습니다.'); 
              ROLLBACK;       
       WHEN USER_DEFINE_ERROR3
         THEN RAISE_APPLICATION_ERROR(-20004, '과정코드가 존재하지 않습니다.'); 
              ROLLBACK;              
       WHEN USER_DEFINE_ERROR4
         THEN RAISE_APPLICATION_ERROR(-20006, '강의실코드가 존재하지 않습니다.'); 
              ROLLBACK;
       WHEN USER_DEFINE_ERROR
         THEN RAISE_APPLICATION_ERROR(-20005, '이미 진행중인 과정의 강의실 또는 교수님입니다.' );
              ROLLBACK;        
       WHEN OTHERS
        THEN ROLLBACK;
        
    -- 커밋
    --COMMIT;

END;
--==>> Procedure PRC_OPENCOURSE_UPDATE이(가) 컴파일되었습니다.


-- ③ 개설과정 데이터 DELETE 프로시저 생성(개설과정코드, 강의시작일, 강의종료일, 교수번호, 과정코드, 강의실코드)
CREATE OR REPLACE PROCEDURE PRC_OPENCOURSE_DELETE
( V_OPENCOURSE_CODE      IN TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE
)
IS
    USER_DEFINE_ERROR   EXCEPTION;
    V_OPCODE            TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE;
BEGIN   
    
    SELECT NVL(MAX(OPENCOURSE_CODE), '0') INTO V_OPCODE
    FROM   TBL_OPENCOURSE 
    WHERE  OPENCOURSE_CODE = V_OPENCOURSE_CODE;
    
    IF V_OPCODE = '0'
        THEN RAISE USER_DEFINE_ERROR;
    END IF;
    
    DELETE
    FROM TBL_OPENCOURSE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
    
    EXCEPTION   
        WHEN USER_DEFINE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20007, '개설과정코드가 존재하지않습니다.');
        WHEN OTHERS
            THEN ROLLBACK;
    -- 커밋
    COMMIT;          
END;
--==>> Procedure PRC_OPENCOURSE_DELETE이(가) 컴파일되었습니다.
--------------------------------------------------------------------------------

-- TBL_SUBJECT : 과목 데이터 추가
CREATE OR REPLACE PROCEDURE PRC_SUBJECT_INSERT
( V_NAME            IN  TBL_SUBJECT.NAME%TYPE
)
IS
    V_SUBJECT_CODE  TBL_SUBJECT.SUBJECT_CODE%TYPE;
BEGIN
    V_SUBJECT_CODE := 'SUB' || LPAD(SEQ_OPENSUBJECT.NEXTVAL, 4, 0);
    
    INSERT INTO TBL_SUBJECT
    VALUES(V_SUBJECT_CODE, V_NAME);

    --COMMIT;
END;
--==>> Procedure PRC_SUBJECT_INSERT이(가) 컴파일되었습니다.


-- TBL_SUBJECT : 과목 이름 변경
CREATE OR REPLACE PROCEDURE PRC_SUBJECT_UPDATE
( V_SUBJECT_CODE  IN  TBL_SUBJECT.SUBJECT_CODE%TYPE
, V_NAME          IN  TBL_SUBJECT.NAME%TYPE
)
IS
    SUBJECT_CODE_CHECK      TBL_SUBJECT.SUBJECT_CODE%TYPE;
    SUBJECT_CODE_ERROR      EXCEPTION;
    
BEGIN  
    -- 과목코드 확인
    SELECT NVL(MAX(SUBJECT_CODE), NULL) INTO SUBJECT_CODE_CHECK
    FROM TBL_SUBJECT
    WHERE SUBJECT_CODE = V_SUBJECT_CODE;
    
    -- 없는 과목코드면, 예외 발생
    IF (SUBJECT_CODE_CHECK IS NULL)
        THEN RAISE SUBJECT_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    UPDATE TBL_SUBJECT
    SET NAME = V_NAME
    WHERE SUBJECT_CODE = V_SUBJECT_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN SUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20008, '입력하신 과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋        
    --COMMIT;
END;
--==>> Procedure PRC_SUBJECT_UPDATE이(가) 컴파일되었습니다.


-- TBL_SUBJECT : 과목 데이터 삭제
CREATE OR REPLACE PROCEDURE PRC_SUBJECT_DELETE
( V_SUBJECT_CODE  IN  TBL_SUBJECT.SUBJECT_CODE%TYPE
)
IS
    SUBJECT_CODE_CHECK      TBL_SUBJECT.SUBJECT_CODE%TYPE;
    SUBJECT_CODE_ERROR      EXCEPTION;
    
BEGIN
    -- 과목코드 확인
    SELECT NVL(MAX(SUBJECT_CODE), NULL) INTO SUBJECT_CODE_CHECK
    FROM TBL_SUBJECT
    WHERE SUBJECT_CODE = V_SUBJECT_CODE;
    
    -- 없는 과목코드면, 예외 발생
    IF (SUBJECT_CODE_CHECK IS NULL)
        THEN RAISE SUBJECT_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    DELETE TBL_SUBJECT
    WHERE SUBJECT_CODE = V_SUBJECT_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN SUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20008, '입력하신 과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋
    --COMMIT;
END;
--==>> Procedure PRC_SUBJECT_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- TBL_OPENSUBJECT : 개설과목 추가
CREATE OR REPLACE PROCEDURE PRC_OPENSUBJECT_INSERT
( V_STARTDATE         IN  TBL_OPENSUBJECT.STARTDATE%TYPE
, V_ENDDATE           IN  TBL_OPENSUBJECT.ENDDATE%TYPE
, V_OPENCOURSE_CODE   IN  TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE
, V_SUBJECT_CODE      IN  TBL_SUBJECT.SUBJECT_CODE%TYPE
, V_BOOK_CODE         IN  TBL_BOOK.BOOK_CODE%TYPE
)
IS
    V_COURSE_STARTDATE      TBL_OPENCOURSE.STARTDATE%TYPE;
    V_COURSE_ENDDATE        TBL_OPENCOURSE.ENDDATE%TYPE;
    V_OPENSUBJECT_CODE      TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE;
    V_CUR_STARTDATE         TBL_OPENSUBJECT.STARTDATE%TYPE;
    V_CUR_ENDDATE           TBL_OPENSUBJECT.ENDDATE%TYPE;
    
    OPENCOURSE_CODE_CHECK   TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE;
    SUBJECT_CODE_CHECK      TBL_SUBJECT.SUBJECT_CODE%TYPE;
    SUBJECT_OVERLAP_CHECK   NUMBER;
    BOOK_CODE_CHECK         TBL_BOOK.BOOK_CODE%TYPE;  
    
    SUBJECT_DATE_ERROR          EXCEPTION;
    COURSE_DATE_ERROR           EXCEPTION;
    SUBJECT_DATE_OVERLAP_ERROR  EXCEPTION;
    OPENCOURSE_CODE_ERROR       EXCEPTION;  
    BOOK_CODE_ERROR             EXCEPTION;
    SUBJECT_CODE_ERROR          EXCEPTION;
    SUBJECT_OVERLAP_ERROR       EXCEPTION;
    
    CURSOR CUR_OPENSUBJECT_DATE
    IS
    SELECT STARTDATE, ENDDATE
    FROM TBL_OPENSUBJECT
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE
    ORDER BY STARTDATE;
BEGIN
    -- 과목시작일 <= 과목완료일, 아니면 예외 발생
    IF ( NOT(V_STARTDATE <= V_ENDDATE) )
        THEN RAISE SUBJECT_DATE_ERROR;
    END IF;
    
    -- 개설과정코드 확인
    SELECT NVL(MAX(OPENCOURSE_CODE), NULL) INTO OPENCOURSE_CODE_CHECK
    FROM TBL_OPENCOURSE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
    
    -- 없는 개설과정코드면, 예외 발생
    IF (OPENCOURSE_CODE_CHECK IS NULL)
        THEN RAISE OPENCOURSE_CODE_ERROR;
    END IF;
    
    -- 개설과정시작일, 개설과정완료일 변수에 값 대입
    SELECT STARTDATE, ENDDATE INTO V_COURSE_STARTDATE, V_COURSE_ENDDATE
    FROM TBL_OPENCOURSE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
      
    -- 과목코드 확인
    SELECT NVL(MAX(SUBJECT_CODE), NULL) INTO SUBJECT_CODE_CHECK
    FROM TBL_SUBJECT
    WHERE SUBJECT_CODE = V_SUBJECT_CODE;
    
    -- 없는 과목코드면, 예외 발생
    IF (SUBJECT_CODE_CHECK IS NULL)
        THEN RAISE SUBJECT_CODE_ERROR;
    END IF;
   
    -- 교재코드 확인
    SELECT NVL(MAX(BOOK_CODE), NULL) INTO BOOK_CODE_CHECK
    FROM TBL_BOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    -- 없는 교재코드면, 예외 발생
    IF (BOOK_CODE_CHECK IS NULL)
        THEN RAISE BOOK_CODE_ERROR;
    END IF;
    
    -- 과정기간 안에 없으면, 예외 발생
    -- (과목시작일 >= 과정시작일 AND 과목완료일 <= 과정완료일)
    IF ( NOT(V_STARTDATE >= V_COURSE_STARTDATE AND V_ENDDATE <= V_COURSE_ENDDATE) )
        THEN RAISE COURSE_DATE_ERROR;
    END IF;
   
    -- 같은과정 내에 있는 과목끼리 기간 겹치면, 예외 발생
    OPEN CUR_OPENSUBJECT_DATE;
    
    LOOP
        FETCH CUR_OPENSUBJECT_DATE INTO V_CUR_STARTDATE, V_CUR_ENDDATE;
        
        EXIT WHEN CUR_OPENSUBJECT_DATE%NOTFOUND;
        
        IF (V_STARTDATE <= V_CUR_STARTDATE AND V_ENDDATE >= V_CUR_STARTDATE)
            THEN RAISE SUBJECT_DATE_OVERLAP_ERROR;
        ELSIF (V_STARTDATE <= V_CUR_ENDDATE AND V_ENDDATE >= V_CUR_ENDDATE)
            THEN RAISE SUBJECT_DATE_OVERLAP_ERROR;    
        ELSIF (V_STARTDATE >= V_CUR_STARTDATE AND V_ENDDATE <= V_CUR_ENDDATE)
            THEN RAISE SUBJECT_DATE_OVERLAP_ERROR;
        END IF;
     END LOOP;  
     
    CLOSE CUR_OPENSUBJECT_DATE;  
            
    -- 해당 과정내에 개설된 과목코드와 겹치는 과목코드인지 확인
    SELECT COUNT(*) INTO SUBJECT_OVERLAP_CHECK
    FROM TBL_OPENSUBJECT
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE
      AND SUBJECT_CODE = V_SUBJECT_CODE;
      
    -- 중복되는 과목코드 있으면, 예외 발생  
    IF (SUBJECT_OVERLAP_CHECK != 0)
        THEN RAISE SUBJECT_OVERLAP_ERROR;
    END IF;
 
    -- 개설과목코드 값 대입
    V_OPENSUBJECT_CODE := 'OPSUB' || LPAD(SEQ_OPENSUBJECT.NEXTVAL, 4, 0);
    
    -- 쿼리작성
    INSERT INTO TBL_OPENSUBJECT(OPENSUBJECT_CODE, STARTDATE, ENDDATE, OPENCOURSE_CODE, SUBJECT_CODE, BOOK_CODE)
    VALUES(V_OPENSUBJECT_CODE, V_STARTDATE, V_ENDDATE, V_OPENCOURSE_CODE, V_SUBJECT_CODE, V_BOOK_CODE);
    
    -- 예외처리
    EXCEPTION
        WHEN SUBJECT_DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20302, '과목시작일/과목완료일 입력 오류');
                 ROLLBACK; 
        WHEN OPENCOURSE_CODE_ERROR 
            THEN RAISE_APPLICATION_ERROR(-20007, '입력하신 개설과정코드가 존재하지 않습니다.');
                 ROLLBACK;   
        WHEN SUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20008, '입력하신 과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN BOOK_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20009, '입력하신 교재코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN COURSE_DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20303, '과정기간 확인 후 입력해주세요');
                 ROLLBACK; 
        WHEN SUBJECT_DATE_OVERLAP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20010, '과정 내 과목날짜 중복 오류');
                 ROLLBACK;                  
        WHEN SUBJECT_OVERLAP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20011, '과정 안에 이미 존재하는 과목코드입니다.');
                 ROLLBACK;                     
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_OPENSUBJECT_INSERT이(가) 컴파일되었습니다.


-- TBL_OPENSUBJECT : ① 개설과목 정보(배점제외) UPDATE
CREATE OR REPLACE PROCEDURE PRC_OPENSUBJECT_UPDATE
( V_OPENSUBJECT_CODE  IN  TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE
, V_STARTDATE         IN  TBL_OPENSUBJECT.STARTDATE%TYPE
, V_ENDDATE           IN  TBL_OPENSUBJECT.ENDDATE%TYPE
, V_OPENCOURSE_CODE   IN  TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE
, V_SUBJECT_CODE      IN  TBL_SUBJECT.SUBJECT_CODE%TYPE
, V_BOOK_CODE         IN  TBL_BOOK.BOOK_CODE%TYPE    
)
IS 
    V_ATTEND                    TBL_OPENSUBJECT.ATTEND%TYPE;  
    V_PRACTICE                  TBL_OPENSUBJECT.PRACTICE%TYPE;
    V_WRITE                     TBL_OPENSUBJECT.WRITE%TYPE; 
    V_COURSE_STARTDATE          TBL_OPENCOURSE.STARTDATE%TYPE;
    V_COURSE_ENDDATE            TBL_OPENCOURSE.ENDDATE%TYPE;
    V_CUR_STARTDATE             TBL_OPENSUBJECT.STARTDATE%TYPE;
    V_CUR_ENDDATE               TBL_OPENSUBJECT.ENDDATE%TYPE;
    
    OPENSUBJECT_CODE_CHECK      TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE;
    OPENCOURSE_CODE_CHECK       TBL_OPENCOURSE.OPENCOURSE_CODE%TYPE;
    SUBJECT_CODE_CHECK          TBL_SUBJECT.SUBJECT_CODE%TYPE;
    SUBJECT_OVERLAP_CHECK       NUMBER;
    BOOK_CODE_CHECK             TBL_BOOK.BOOK_CODE%TYPE;  
    
    OPENSUBJECT_CODE_ERROR      EXCEPTION;
    SUBJECT_DATE_ERROR          EXCEPTION;
    COURSE_DATE_ERROR           EXCEPTION;
    SUBJECT_DATE_OVERLAP_ERROR  EXCEPTION;
    OPENCOURSE_CODE_ERROR       EXCEPTION;  
    BOOK_CODE_ERROR             EXCEPTION;
    SUBJECT_CODE_ERROR          EXCEPTION;
    SUBJECT_OVERLAP_ERROR       EXCEPTION;
    
    CURSOR CUR_OPENSUBJECT_DATE
    IS
    SELECT STARTDATE, ENDDATE
    FROM TBL_OPENSUBJECT
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE
    ORDER BY STARTDATE;

BEGIN
    -- UPDATE : 예전에 입력했던 데이터 DELETE 후 → INSERT 진행
    
    -- 개설과목코드 확인
    SELECT NVL(MAX(OPENSUBJECT_CODE), NULL) INTO OPENSUBJECT_CODE_CHECK
    FROM TBL_OPENSUBJECT
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 없는 개설과목코드면, 예외 발생
    IF (OPENSUBJECT_CODE_CHECK IS NULL)
        THEN RAISE OPENSUBJECT_CODE_ERROR;
    END IF;
    
    -- DELETE 전에 : V_ATTEND, V_PRACTICE, V_WRITE 에 원래 정해놓은 출석, 실기, 필기 값 넣어주기
    SELECT ATTEND, PRACTICE, WRITE INTO V_ATTEND, V_PRACTICE, V_WRITE
    FROM TBL_OPENSUBJECT
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- DELETE 진행
    DELETE
    FROM TBL_OPENSUBJECT
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 과목시작일 <= 과목완료일, 아니면 예외 발생
    IF ( NOT(V_STARTDATE <= V_ENDDATE) )
        THEN RAISE SUBJECT_DATE_ERROR;
    END IF;
    
    -- 개설과정코드 확인
    SELECT NVL(MAX(OPENCOURSE_CODE), NULL) INTO OPENCOURSE_CODE_CHECK
    FROM TBL_OPENCOURSE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
    
    -- 없는 개설과정코드면, 예외 발생
    IF (OPENCOURSE_CODE_CHECK IS NULL)
        THEN RAISE OPENCOURSE_CODE_ERROR;
    END IF;
    
    -- 개설과정시작일, 개설과정완료일 변수에 값 대입
    SELECT STARTDATE, ENDDATE INTO V_COURSE_STARTDATE, V_COURSE_ENDDATE
    FROM TBL_OPENCOURSE
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE;
      
    -- 과목코드 확인
    SELECT NVL(MAX(SUBJECT_CODE), NULL) INTO SUBJECT_CODE_CHECK
    FROM TBL_SUBJECT
    WHERE SUBJECT_CODE = V_SUBJECT_CODE;
    
    -- 없는 과목코드면, 예외 발생
    IF (SUBJECT_CODE_CHECK IS NULL)
        THEN RAISE SUBJECT_CODE_ERROR;
    END IF;
   
    -- 교재코드 확인
    SELECT NVL(MAX(BOOK_CODE), NULL) INTO BOOK_CODE_CHECK
    FROM TBL_BOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    -- 없는 교재코드면, 예외 발생
    IF (BOOK_CODE_CHECK IS NULL)
        THEN RAISE BOOK_CODE_ERROR;
    END IF;
      
    -- 과정기간 안에 없으면, 예외 발생
    -- (과목시작일 >= 과정시작일 AND 과목완료일 <= 과정완료일)
    IF ( NOT(V_STARTDATE >= V_COURSE_STARTDATE AND V_ENDDATE <= V_COURSE_ENDDATE) )
        THEN RAISE COURSE_DATE_ERROR;
    END IF;
   
    -- 같은과정 내에 있는 과목끼리 기간 겹치면, 예외 발생
    OPEN CUR_OPENSUBJECT_DATE;
    
    LOOP
        FETCH CUR_OPENSUBJECT_DATE INTO V_CUR_STARTDATE, V_CUR_ENDDATE;
        
        EXIT WHEN CUR_OPENSUBJECT_DATE%NOTFOUND;
        
        IF (V_STARTDATE <= V_CUR_STARTDATE AND V_ENDDATE >= V_CUR_STARTDATE)
            THEN RAISE SUBJECT_DATE_OVERLAP_ERROR;
        ELSIF (V_STARTDATE <= V_CUR_ENDDATE AND V_ENDDATE >= V_CUR_ENDDATE)
            THEN RAISE SUBJECT_DATE_OVERLAP_ERROR;    
        ELSIF (V_STARTDATE >= V_CUR_STARTDATE AND V_ENDDATE <= V_CUR_ENDDATE)
            THEN RAISE SUBJECT_DATE_OVERLAP_ERROR;
        END IF;
     END LOOP;  
     
    CLOSE CUR_OPENSUBJECT_DATE;  
            
    -- 해당 과정내에 개설된 과목코드와 겹치는 과목코드인지 확인
    SELECT COUNT(*) INTO SUBJECT_OVERLAP_CHECK
    FROM TBL_OPENSUBJECT
    WHERE OPENCOURSE_CODE = V_OPENCOURSE_CODE
      AND SUBJECT_CODE = V_SUBJECT_CODE;
      
    -- 중복되는 과목코드 있으면, 예외 발생  
    IF (SUBJECT_OVERLAP_CHECK != 0)
        THEN RAISE SUBJECT_OVERLAP_ERROR;
    END IF;

    -- 쿼리작성
    INSERT INTO TBL_OPENSUBJECT
    VALUES(V_OPENSUBJECT_CODE, V_STARTDATE, V_ENDDATE, SYSDATE
         , V_ATTEND, V_PRACTICE, V_WRITE, V_OPENCOURSE_CODE, V_SUBJECT_CODE, V_BOOK_CODE);
    
    -- 예외처리
    EXCEPTION
        WHEN OPENSUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20012, '입력하신 개설과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN SUBJECT_DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20302, '과목시작일/과목완료일 입력 오류');
                 ROLLBACK; 
        WHEN OPENCOURSE_CODE_ERROR 
            THEN RAISE_APPLICATION_ERROR(-20007, '입력하신 개설과정코드가 존재하지 않습니다.');
                 ROLLBACK;   
        WHEN SUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20008, '입력하신 과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN BOOK_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20009, '입력하신 교재코드가 존재하지 않습니다.');
                 ROLLBACK;   
        WHEN COURSE_DATE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20303, '과정기간 확인 후 입력해주세요');
                 ROLLBACK; 
        WHEN SUBJECT_DATE_OVERLAP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20010, '과정 내 과목날짜 중복 오류');
                 ROLLBACK;                  
        WHEN SUBJECT_OVERLAP_ERROR
            THEN RAISE_APPLICATION_ERROR(-20011, '과정 안에 이미 존재하는 과목코드입니다.');
                 ROLLBACK;                     
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_OPENSUBJECT_UPDATE이(가) 컴파일되었습니다.


-- TBL_OPENSUBJECT : ② 개설과목 출결,실기,필기 배점 UPDATE
CREATE OR REPLACE PROCEDURE PRC_OPENSUBJECT_SCORE_UPDATE
( V_OPENSUBJECT_CODE  IN  TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE
, V_ATTEND            IN  TBL_OPENSUBJECT.ATTEND%TYPE  
, V_PRACTICE          IN  TBL_OPENSUBJECT.PRACTICE%TYPE
, V_WRITE             IN  TBL_OPENSUBJECT.WRITE%TYPE  
)
IS
    OPENSUBJECT_CODE_CHECK      TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE; 
    
    OPENSUBJECT_CODE_ERROR      EXCEPTION;
    SCORE_ALLOT_ERROR           EXCEPTION;

BEGIN
    -- 개설과목코드 확인
    SELECT NVL(MAX(OPENSUBJECT_CODE), NULL) INTO OPENSUBJECT_CODE_CHECK
    FROM TBL_OPENSUBJECT
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 없는 개설과목코드면, 예외 발생
    IF (OPENSUBJECT_CODE_CHECK IS NULL)
        THEN RAISE OPENSUBJECT_CODE_ERROR;
    END IF;
    
    -- 출결 + 실기 + 실기 배점 = 100 확인 후, 아니면 예외 발생
    IF (NVL(V_ATTEND, 0) + NVL(V_PRACTICE, 0) + NVL(V_WRITE, 0) != 100)
        THEN RAISE SCORE_ALLOT_ERROR;
    END IF;
    
    -- 쿼리작성
    UPDATE TBL_OPENSUBJECT
    SET ATTEND = V_ATTEND, PRACTICE = V_PRACTICE, WRITE = V_WRITE
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 예외처리
    EXCEPTION
        WHEN OPENSUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20012, '입력하신 개설과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN SCORE_ALLOT_ERROR
            THEN RAISE_APPLICATION_ERROR(-20401, '배점 입력 오류');
                 ROLLBACK;          
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_OPENSUBJECT_SCORE_UPDATE이(가) 컴파일되었습니다.


-- TBL_OPENSUBJECT : 개설과목 데이터 삭제
CREATE OR REPLACE PROCEDURE PRC_OPENSUBJECT_DELETE
( V_OPENSUBJECT_CODE  IN  TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE
)
IS
    OPENSUBJECT_CODE_CHECK      TBL_OPENSUBJECT.OPENSUBJECT_CODE%TYPE;
    OPENSUBJECT_CODE_ERROR      EXCEPTION;
    
BEGIN  
    -- 개설과목코드 확인
    SELECT NVL(MAX(OPENSUBJECT_CODE), NULL) INTO OPENSUBJECT_CODE_CHECK
    FROM TBL_OPENSUBJECT
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 없는 개설과목코드면, 예외 발생
    IF (OPENSUBJECT_CODE_CHECK IS NULL)
        THEN RAISE OPENSUBJECT_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    DELETE FROM TBL_OPENSUBJECT
    WHERE OPENSUBJECT_CODE = V_OPENSUBJECT_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN OPENSUBJECT_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20012, '입력하신 개설과목코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋
    --COMMIT;
END;
--==>> Procedure PRC_OPENSUBJECT_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- TBL_DROP : 중도탈락 학생 INSERT
CREATE OR REPLACE PROCEDURE PRC_DROP_INSERT
( V_SIGNCOURSE_CODE   IN  TBL_SIGNCOURSE.SIGNCOURSE_CODE%TYPE
, V_REASON_CODE       IN  TBL_DROPREASON.REASON_CODE%TYPE
)
IS
    SIGNCOURSE_CODE_CHECK   TBL_SIGNCOURSE.SIGNCOURSE_CODE%TYPE;
    SIGNCOURSE_CODE_ERROR   EXCEPTION;
BEGIN
    -- 수강신청코드 확인
    SELECT NVL(MAX(SIGNCOURSE_CODE), NULL) INTO SIGNCOURSE_CODE_CHECK
    FROM TBL_DROP
    WHERE SIGNCOURSE_CODE = V_SIGNCOURSE_CODE;
    
    -- 이미 존재하는 수강신청코드면, 예외 발생
    IF (SIGNCOURSE_CODE_CHECK IS NOT NULL)
        THEN RAISE SIGNCOURSE_CODE_ERROR;
    END IF;

    -- 쿼리 작성
    INSERT INTO TBL_DROP(DROP_CODE, SIGNCOURSE_CODE, REASON_CODE)
    VALUES(SEQ_DROP.NEXTVAL, V_SIGNCOURSE_CODE, V_REASON_CODE);
    
    -- 예외 처리
    EXCEPTION
        WHEN SIGNCOURSE_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20013, '중복된 수강신청 코드입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_DROP_INSERT이(가) 컴파일되었습니다.


-- TBL_DROP : 중도탈락 학생의 탈락사유코드 데이터 UPDATE
CREATE OR REPLACE PROCEDURE PRC_DROP_UPDATE
( V_DROP_CODE    IN  TBL_DROP.DROP_CODE%TYPE
, V_REASON_CODE  IN  TBL_DROPREASON.REASON_CODE%TYPE
)
IS
    DROP_CODE_CHECK     TBL_DROP.DROP_CODE%TYPE;
    REASON_CODE_CHECK   TBL_DROPREASON.REASON_CODE%TYPE;
    
    DROP_CODE_ERROR     EXCEPTION;
    REASON_CODE_ERROR   EXCEPTION;
    
BEGIN
    -- 중도탈락코드 확인
    SELECT NVL(MAX(DROP_CODE), NULL) INTO DROP_CODE_CHECK
    FROM TBL_DROP
    WHERE DROP_CODE = V_DROP_CODE;
    
    -- 없는 중도탈락코드면, 예외 발생
    IF (DROP_CODE_CHECK IS NULL)
        THEN RAISE DROP_CODE_ERROR;
    END IF;
    
    -- 중도탈락사유코드 확인
    SELECT NVL(MAX(REASON_CODE), NULL) INTO REASON_CODE_CHECK
    FROM TBL_DROPREASON
    WHERE REASON_CODE = V_REASON_CODE;
    
    -- 없는 중도탈락사유코드면, 예외 발생
    IF (REASON_CODE_CHECK IS NULL)
        THEN RAISE REASON_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    UPDATE TBL_DROP
    SET REASON_CODE = V_REASON_CODE
    WHERE DROP_CODE = V_DROP_CODE;   
    
    -- 예외 처리
    EXCEPTION
        WHEN DROP_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20014, '입력하신 중도탈락코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN REASON_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20015, '입력하신 중도탈락사유코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_DROP_UPDATE이(가) 컴파일되었습니다.


-- TBL_DROP : 중도탈락 학생 데이터 DELETE
CREATE OR REPLACE PROCEDURE PRC_DROP_DELETE
( V_DROP_CODE IN  TBL_DROP.DROP_CODE%TYPE
)
IS
    DROP_CODE_CHECK     TBL_DROP.DROP_CODE%TYPE;
    DROP_CODE_ERROR     EXCEPTION;
BEGIN
    -- 중도탈락코드 확인
    SELECT NVL(MAX(DROP_CODE), NULL) INTO DROP_CODE_CHECK
    FROM TBL_DROP
    WHERE DROP_CODE = V_DROP_CODE;
    
    -- 없는 중도탈락코드면, 예외 발생
    IF (DROP_CODE_CHECK IS NULL)
        THEN RAISE DROP_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    DELETE TBL_DROP
    WHERE DROP_CODE = V_DROP_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN DROP_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20014, '입력하신 중도탈락코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_DROP_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- TBL_DROPREASON : 중도탈락사유 테이블 INSERT
CREATE OR REPLACE PROCEDURE PRC_DROPREASON_INSERT
( V_REASON    IN  TBL_DROPREASON.REASON%TYPE
)
IS
BEGIN
    -- 쿼리작성
    INSERT INTO TBL_DROPREASON
    VALUES(SEQ_DROPREASON.NEXTVAL, V_REASON);
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_DROPREASON_INSERT이(가) 컴파일되었습니다.


-- TBL_DROPREASON : 중도탈락사유 UPDATE
CREATE OR REPLACE PROCEDURE PRC_DROPREASON_UPDATE
( V_REASON_CODE   IN  TBL_DROPREASON.REASON_CODE%TYPE
, V_REASON        IN  TBL_DROPREASON.REASON%TYPE
)
IS
    REASON_CODE_CHECK   TBL_DROPREASON.REASON_CODE%TYPE;
    REASON_CODE_ERROR   EXCEPTION;
BEGIN
    -- 중도탈락코드 확인
    SELECT NVL(MAX(REASON_CODE), NULL) INTO REASON_CODE_CHECK
    FROM TBL_DROPREASON
    WHERE REASON_CODE = V_REASON_CODE;
    
    -- 없는 중도탈락코드면, 예외 발생
    IF (REASON_CODE_CHECK IS NULL)
        THEN RAISE REASON_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    UPDATE TBL_DROPREASON
    SET REASON = V_REASON
    WHERE REASON_CODE = V_REASON_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN REASON_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20014, '입력하신 중도탈락코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋             
    --COMMIT;
END;
--==>> Procedure PRC_DROPREASON_UPDATE이(가) 컴파일되었습니다.


-- TBL_DROPREASON : 중도탈락사유 데이터 DELETE
CREATE OR REPLACE PROCEDURE PRC_DROPREASON_DELETE
( V_REASON_CODE   IN  TBL_DROPREASON.REASON_CODE%TYPE   
)
IS
    REASON_CODE_CHECK   TBL_DROPREASON.REASON_CODE%TYPE;
    REASON_CODE_ERROR   EXCEPTION;
BEGIN
    -- 중도탈락코드 확인
    SELECT NVL(MAX(REASON_CODE), NULL) INTO REASON_CODE_CHECK
    FROM TBL_DROPREASON
    WHERE REASON_CODE = V_REASON_CODE;
    
    -- 없는 중도탈락코드면, 예외 발생
    IF (REASON_CODE_CHECK IS NULL)
        THEN RAISE REASON_CODE_ERROR;
    END IF;

    -- 쿼리 작성
    DELETE TBL_DROPREASON
    WHERE REASON_CODE = V_REASON_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN REASON_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20014, '입력하신 중도탈락코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_DROPREASON_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- TBL_BOOK : 교재 테이블 INSERT
CREATE OR REPLACE PROCEDURE PRC_BOOK_INSERT
(  V_NAME      IN  TBL_BOOK.NAME%TYPE
,  V_AUTHOR    IN  TBL_BOOK.AUTHOR%TYPE
,  V_PUBLISHER IN  TBL_BOOK.PUBLISHER%TYPE
)
IS
BEGIN
    -- 쿼리작성
    INSERT INTO TBL_BOOK
    VALUES(SEQ_BOOK.NEXTVAL, V_NAME, V_AUTHOR, V_PUBLISHER);
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_BOOK_INSERT이(가) 컴파일되었습니다.


-- TBL_BOOK : 교재정보 UPDATE
CREATE OR REPLACE PROCEDURE PRC_BOOK_UPDATE
( V_BOOK_CODE IN  TBL_BOOK.BOOK_CODE%TYPE
, V_NAME      IN  TBL_BOOK.NAME%TYPE
, V_AUTHOR    IN  TBL_BOOK.AUTHOR%TYPE
, V_PUBLISHER IN  TBL_BOOK.PUBLISHER%TYPE    
)
IS
    BOOK_CODE_CHECK     TBL_BOOK.BOOK_CODE%TYPE;   
    BOOK_CODE_ERROR     EXCEPTION;
BEGIN
    -- 교재코드 확인
    SELECT NVL(MAX(BOOK_CODE), NULL) INTO BOOK_CODE_CHECK
    FROM TBL_BOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    -- 없는 교재코드면, 예외 발생
    IF (BOOK_CODE_CHECK IS NULL)
        THEN RAISE BOOK_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    UPDATE TBL_BOOK
    SET NAME = V_NAME, AUTHOR = V_AUTHOR, PUBLISHER = V_PUBLISHER
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN BOOK_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20009, '입력하신 교재코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋             
    --COMMIT;
END;
--==>> Procedure PRC_BOOK_UPDATE이(가) 컴파일되었습니다.


-- TBL_BOOK : 교재 데이터 DELETE
CREATE OR REPLACE PROCEDURE PRC_BOOK_DELETE
( V_BOOK_CODE IN  TBL_BOOK.BOOK_CODE%TYPE
)
IS
    BOOK_CODE_CHECK     TBL_BOOK.BOOK_CODE%TYPE;   
    BOOK_CODE_ERROR     EXCEPTION;
BEGIN
    -- 교재코드 확인
    SELECT NVL(MAX(BOOK_CODE), NULL) INTO BOOK_CODE_CHECK
    FROM TBL_BOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    -- 없는 교재코드면, 예외 발생
    IF (BOOK_CODE_CHECK IS NULL)
        THEN RAISE BOOK_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    DELETE TBL_BOOK
    WHERE BOOK_CODE = V_BOOK_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN BOOK_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20009, '입력하신 교재코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋 
    --COMMIT;
END;
--==>> Procedure PRC_BOOK_DELETE이(가) 컴파일되었습니다.

--------------------------------------------------------------------------------

-- TBL_CLASSROOM : 강의실 테이블 INSERT
CREATE OR REPLACE PROCEDURE PRC_CLASSROOM_INSERT
( V_CLASSROOM_CODE        IN  TBL_CLASSROOM.CLASSROOM_CODE%TYPE
, V_CLASSROOM_COMMENT     IN  TBL_CLASSROOM.CLASSROOM_COMMENT%TYPE
, V_CAPACITY              IN  TBL_CLASSROOM.CAPACITY%TYPE    
)
IS
    CLASSROOM_CODE_CHECK    TBL_CLASSROOM.CLASSROOM_CODE%TYPE;   
    CLASSROOM_CODE_ERROR    EXCEPTION;
BEGIN
    -- 강의실코드 확인
    SELECT NVL(MAX(CLASSROOM_CODE), NULL) INTO CLASSROOM_CODE_CHECK
    FROM TBL_CLASSROOM
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    -- 이미 존재하는 강의실코드면, 예외 발생
    IF (CLASSROOM_CODE_CHECK IS NOT NULL)
        THEN RAISE CLASSROOM_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    INSERT INTO TBL_CLASSROOM
    VALUES(V_CLASSROOM_CODE, V_CLASSROOM_COMMENT, V_CAPACITY);
    
    -- 예외 처리
    EXCEPTION
        WHEN CLASSROOM_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20016, '중복된 강의실 코드입니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_CLASSROOM_INSERT이(가) 컴파일되었습니다.


-- TBL_CLASSROOM : 강의실 설명 OR 수용인원 데이터 UPDATE
CREATE OR REPLACE PROCEDURE PRC_CLASSROOM_UPDATE
( V_CLASSROOM_CODE        IN  TBL_CLASSROOM.CLASSROOM_CODE%TYPE
, V_CLASSROOM_COMMENT     IN  TBL_CLASSROOM.CLASSROOM_COMMENT%TYPE
, V_CAPACITY              IN  TBL_CLASSROOM.CAPACITY%TYPE    
)
IS
    CLASSROOM_CODE_CHECK    TBL_CLASSROOM.CLASSROOM_CODE%TYPE;   
    CLASSROOM_CODE_ERROR    EXCEPTION;
BEGIN
    -- 강의실 코드 확인
    SELECT NVL(MAX(CLASSROOM_CODE), NULL) INTO CLASSROOM_CODE_CHECK
    FROM TBL_CLASSROOM
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    -- 없는 강의실이면, 예외 발생
    IF (CLASSROOM_CODE_CHECK IS NULL)
        THEN RAISE CLASSROOM_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    UPDATE TBL_CLASSROOM
    SET CLASSROOM_COMMENT = V_CLASSROOM_COMMENT, CAPACITY = V_CAPACITY
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN CLASSROOM_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20006, '입력하신 강의실코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
                
    -- 커밋    
    --COMMIT;
END;
--==>> Procedure PRC_CLASSROOM_UPDATE이(가) 컴파일되었습니다.


-- TBL_CLASSROOM : 강의실 데이터 DELETE
CREATE OR REPLACE PROCEDURE PRC_CLASSROOM_DELETE
( V_CLASSROOM_CODE        IN  TBL_CLASSROOM.CLASSROOM_CODE%TYPE
)
IS
    CLASSROOM_CODE_CHECK    TBL_CLASSROOM.CLASSROOM_CODE%TYPE;   
    CLASSROOM_CODE_ERROR    EXCEPTION;
BEGIN
    -- 강의실 코드 확인
    SELECT NVL(MAX(CLASSROOM_CODE), NULL) INTO CLASSROOM_CODE_CHECK
    FROM TBL_CLASSROOM
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    -- 없는 강의실이면, 예외 발생
    IF (CLASSROOM_CODE_CHECK IS NULL)
        THEN RAISE CLASSROOM_CODE_ERROR;
    END IF;
    
    -- 쿼리 작성
    DELETE TBL_CLASSROOM
    WHERE CLASSROOM_CODE = V_CLASSROOM_CODE;
    
    -- 예외 처리
    EXCEPTION
        WHEN CLASSROOM_CODE_ERROR
            THEN RAISE_APPLICATION_ERROR(-20006, '입력하신 강의실코드가 존재하지 않습니다.');
                 ROLLBACK;
        WHEN OTHERS
            THEN ROLLBACK;
            
    -- 커밋     
    --COMMIT;
END;
--==>> Procedure PRC_CLASSROOM_DELETE이(가) 컴파일되었습니다.
--------------------------------------------------------------------------------
